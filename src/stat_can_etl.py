# -*- coding: utf-8 -*-
"""
Created on Sat Sep 18 22:20:54 2021

@author: Alexander Mikhailov
"""


import os

from lib.tools import build_push_data_frame

# =============================================================================
# Capital
# =============================================================================
# =============================================================================
# 16100077-eng.xlsx: NO;
# 16100088-eng.xlsx: NO;
# 16100118-eng.xlsx: NO;
# 34100278-eng.xlsx: NO;
# 34100279-eng.xlsx: NO;
# 36100096-eng.xlsx: YES;
# 36100097-eng.xlsx: NO;
# 36100109-eng.xlsx: NO;
# 36100174-eng.xlsx: NO;
# 36100210-eng.xlsx: NO;
# 36100236-eng.xlsx: YES ALTERNATIVE;
# 36100237-eng.xlsx: YES ALTERNATIVE;
# 36100238-eng.xlsx: NO;
# =============================================================================

# =============================================================================
# Labor
# =============================================================================
# =============================================================================
# 14100027-eng.xlsx: YES;
# 14100036-eng.xlsx: NO;
# 14100221-eng.xlsx: NO;
# 14100235-eng.xlsx: YES;
# 14100238-eng.xlsx: NO;
# 14100242-eng.xlsx: NO;
# 14100243-eng.xlsx: NO;
# 14100259-eng.xlsx: MAYBE;
# 14100265-eng.xlsx: YES;
# 14100355-eng.xlsx: MAYBE;
# 14100392-eng.xlsx: NO;
# 36100489-eng.xlsx: NO;
# =============================================================================

# =============================================================================
# Manufacturing
# =============================================================================
# =============================================================================
# 10100094-eng.xlsx: Capacity utilization rates (Bank of Canada calculated series), seasonally adjusted
# 16100013-eng.xlsx: NO;
# 16100038-eng.xlsx: NO;
# 16100047-eng.xlsx: NO;
# 16100052-eng.xlsx: NO;
# 16100053-eng.xlsx: NO;
# 16100054-eng.xlsx: NO;
# 16100056-eng.xlsx: NO;
# 16100079-eng.xlsx: NO;
# 16100109-eng.xlsx: Industrial capacity utilization rates, by industry
# 16100111-eng.xlsx: Industrial capacity utilization rates, by Standard Industrial Classification, 1980 (SIC)
# 16100117-eng.xlsx: NO;
# 16100119-eng.xlsx: NO;
# 36100207-eng.xlsx: NO;
# 36100208-eng.xlsx: Capital stock: v41713073;
# 36100217-eng.xlsx: NO;
# 36100303-eng.xlsx: NO;
# 36100305-eng.xlsx: NO;
# 36100309-eng.xlsx: NO;
# 36100310-eng.xlsx: NO;
# 36100383-eng.xlsx: NO;
# 36100384-eng.xlsx: NO;
# 36100385-eng.xlsx: YES;
# 36100386-eng.xlsx: YES;
# 36100480-eng.xlsx: Total number of jobs: v111382232;
# 36100488-eng.xlsx: Output, by sector and industry, provincial and territorial: v64602050;
# =============================================================================


BLUEPRINT_CAPITAL = (
    {
        '36100096-eng.zip': (
            'v90968617', 'v90968618', 'v90968619', 'v90968620', 'v90968621',
            'v90971177', 'v90971178', 'v90971179', 'v90971180', 'v90971181',
            'v90973737', 'v90973738', 'v90973739', 'v90973740', 'v90973741'
        )
    },
    {
        '36100210-eng.zip': (
            'v46444563', 'v46444624', 'v46444685', 'v46444746', 'v46444807',
            'v46444929', 'v46444990', 'v46445051', 'v46445112', 'v46445173',
            'v46445295', 'v46445356', 'v46445417', 'v46445478', 'v46445539',
            'v46445661', 'v46445722', 'v46445783', 'v46445844', 'v46445905'
        )
    },
    {
        '36100236-eng.zip': (
            'v1071434', 'v1071435', 'v1071436', 'v1071437', 'v64498363',
            'v1119722', 'v1119723', 'v1119724', 'v1119725', 'v64498371',
            'v4421025', 'v4421026', 'v4421027', 'v4421028', 'v64498379'
        )
    }
)
BLUEPRINT_LABOUR = (
    {
        '14100027-eng.zip': ('v2523013',)
    },
    {
        '14100221-eng.zip': ('v54027148', 'v54027152')
    },
    {
        '14100235-eng.zip': ('v74989',)
    },
    {
        '14100238-eng.zip': ('v1596771',)
    },
    {
        '14100242-eng.zip': ('?v78923847', '?v78923849', '?v78923848')
    },
    {
        '14100243-eng.zip': ('v78931172', 'v78931174', 'v78931173')
    },
    {
        '14100259-eng.zip': ('?v248856', '?v729388', '?v249422', '?v249984')
    },
    {
        '14100265-eng.zip': ('v249139', 'v249703', 'v250265')
    },
    {
        '14100355-eng.zip': ('v2057609', 'v123355112', 'v2057818', '?v101893670', '?v101893671', '?v101893672')
    },
    {
        '14100392-eng.zip': ('v1235071986',)
    },
    {
        '36100489-eng.zip': ('v65521825', '!v65522120', '!v65522415')
    },
)
BLUEPRINT_PRODUCT = (
    {
        '10100094-eng.zip': ('v37482',)
    },
    {
        '16100053-eng.zip': ('v535579', 'v535593', 'v535663', 'v535677')
    },
    {
        '16100054-eng.zip': ('v761808', 'v761927')
    },
    {
        '16100109-eng.zip': ('v4331088',)
    },
    {
        '16100111-eng.zip': ('v142817',)
    },
    {
        '36100207-eng.zip': ('v21573668', 'v21573686')
    },
    {
        '36100208-eng.zip': ('!v41712954', 'v41713056', 'v41713073', 'v41713243')
    },
    {
        '36100217-eng.zip': ('v86718697', 'v86719219')
    },
    {
        '36100303-eng.zip': ('v716397', 'v718173')
    },
    {
        '36100305-eng.zip': ('v719421',)
    },
    {
        '36100309-eng.zip': ('v41707475', '!v41707595', 'v41707775', 'v41708195', 'v41708375')
    },
    {
        '36100310-eng.zip': ('v42189127', '!v42189231', 'v42189387', 'v42189751', 'v42189907')
    },
    {
        '36100383-eng.zip': ('v248', 'v328')
    },
    {
        '36100385-eng.zip': ('v394', 'v473')
    },
    {
        '36100386-eng.zip': ('v11567',)
    },
    {
        '36100480-eng.zip': ('v111382232',)
    },
    {
        '36100488-eng.zip': ('v64602050',)
    }
)


def main():

    FILE_NAME = 'stat_can_desc.csv'
    FILE_NAMES = (
        'stat_can_cap.csv',
        'stat_can_lab.csv',
        'stat_can_prd.csv',
    )

    # =========================================================================
    # Construct Excel File from Specification
    # =========================================================================
    for file_name, blueprint in zip(FILE_NAMES, (BLUEPRINT_CAPITAL, BLUEPRINT_LABOUR, BLUEPRINT_PRODUCT)):
        build_push_data_frame(file_name, blueprint)

    # =========================================================================
    # # =============================================================================
    # # Retrieve Series Description
    # # =============================================================================
    # _df = pd.concat(
    #     [
    #         read_temporary(file_name)
    #         for file_name in FILE_NAMES
    #     ],
    #     axis=1
    # )
    #
    # desc = pd.merge(
    #     read_temporary(FILE_NAME),
    #     _df.transpose(),
    #     left_index=True,
    #     right_index=True,
    # )
    # desc.transpose().to_csv(Path(DIR).joinpath(_FILE_NAME))
    # =========================================================================


if __name__ == '__main__':
    main()
